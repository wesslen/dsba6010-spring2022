<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code examples | Bayesian Statistics</title>
    <link>https://dsba6010-spring2022.netlify.app/example/</link>
      <atom:link href="https://dsba6010-spring2022.netlify.app/example/index.xml" rel="self" type="application/rss+xml" />
    <description>Code examples</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 01 Dec 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://dsba6010-spring2022.netlify.app/media/icon_hubcd1f34ef0b7e1f986d90973bbf4f4ef_7134_512x512_fill_lanczos_center_3.png</url>
      <title>Code examples</title>
      <link>https://dsba6010-spring2022.netlify.app/example/</link>
    </image>
    
    <item>
      <title>Example: 15-1</title>
      <link>https://dsba6010-spring2022.netlify.app/example/15-1-example/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://dsba6010-spring2022.netlify.app/example/15-1-example/</guid>
      <description>
&lt;script src=&#34;https://dsba6010-spring2022.netlify.app/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;examples&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;15.1 Examples&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# simulate a pancake and return randomly ordered sides
sim_pancake &amp;lt;- function() {
    pancake &amp;lt;- sample(1:3,1)
    sides &amp;lt;- matrix(c(1,1,1,0,0,0),2,3)[,pancake]
    sample(sides)
}

# sim 10,000 pancakes
pancakes &amp;lt;- replicate( 1e4 , sim_pancake() )
up &amp;lt;- pancakes[1,]
down &amp;lt;- pancakes[2,]

# compute proportion 1/1 (BB) out of all 1/1 and 1/0
num_11_10 &amp;lt;- sum( up==1 )
num_11 &amp;lt;- sum( up==1 &amp;amp; down==1 )
print(num_11/num_11_10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.6785428&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;measurement-error&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;15.2 Measurement Error&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(WaffleDivorce, package = &amp;quot;rethinking&amp;quot;)
d &amp;lt;- WaffleDivorce
rm(WaffleDivorce)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# points
plot( d$Divorce ~ d$MedianAgeMarriage , ylim=c(4,15) ,
    xlab=&amp;quot;Median age marriage&amp;quot; , ylab=&amp;quot;Divorce rate&amp;quot; )

# standard errors
for ( i in 1:nrow(d) ) {
    ci &amp;lt;- d$Divorce[i] + c(-1,1)*d$Divorce.SE[i]
    x &amp;lt;- d$MedianAgeMarriage[i]
    lines( c(x,x) , ci )
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://dsba6010-spring2022.netlify.app/example/15-1-example_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dlist &amp;lt;- list(
    D_obs = standardize( d$Divorce ),
    D_sd = d$Divorce.SE / sd( d$Divorce ),
    M = standardize( d$Marriage ),
    A = standardize( d$MedianAgeMarriage ),
    N = nrow(d)
)

m15.1 &amp;lt;- ulam(
    alist(
        D_obs ~ dnorm( D_true , D_sd ),
        vector[N]:D_true ~ dnorm( mu , sigma ),
        mu &amp;lt;- a + bA*A + bM*M,
        a ~ dnorm(0,0.2),
        bA ~ dnorm(0,0.5),
        bM ~ dnorm(0,0.5),
        sigma ~ dexp(1)
    ) , data=dlist , chains=4 , cores=4, cmdstan=TRUE )

## R code 15.4
precis( m15.1 , depth=2 )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#plot(m15.1)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
